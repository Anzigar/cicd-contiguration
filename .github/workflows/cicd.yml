name: "CI/CD Pipeline"

on: 
    workflow_dispatch:
    pull_request:
        branches: [feat, develop, main]
    push:
        branches: [develop, main]

jobs:
    security-scan:
        name: "Security Scanning"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install pylint fastapi uvicorn

            - name: "Setup Python"
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"
            
            - name: "Install security scanning tools"
              run: |
                  python -m pip install --upgrade pip
                  pip install bandit safety
            
            - name: "Scan for security vulnerabilities with Bandit"
              run: |
                  bandit -r . -x tests/ -f json -o bandit-results.json
              continue-on-error: true
            
            - name: "Check dependencies for known vulnerabilities"
              run: |
                  safety check -r requirements.txt
    
    lint:
        name: "Code Quality"
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.11"]  
        steps:
            - uses: actions/checkout@v4
            - name: "Set up Python ${{ matrix.python-version }}"
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  pip install black flake8 pylint mypy
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            - name: "Type checking with mypy"
              run: |
                  mypy --ignore-missing-imports .
            - name: "Check code formatting with black"
              run: |
                  black --check --line-length 88 .
            - name: "Lint with flake8"
              run: |
                  flake8 . --count --select=E9,F63,F7,F82 --max-complexity=10 --max-line-length=127 --show-source
            - name: "Analyze code with pylint"
              run: |
                  pylint $(git ls-files "*.py") --disable=C0111,R0903
              continue-on-error: true
    
    test:
        name: "Run Tests"
        needs: [security-scan, lint]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.11"]
        steps:
            - uses: actions/checkout@v4
            - name: "Set up Python ${{ matrix.python-version }}"
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  pip install "pytest>=7.0.0" "pytest-cov==4.1.0" "pytest-asyncio==0.21.1"
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            - name: Verify test files exist
              run: |
                  if [ ! -d "tests" ] || [ -z "$(ls tests/test_*.py 2>/dev/null)" ]; then
                      echo "No test files found in the repository."
                      exit 1
                  fi
            - name: "Run tests with pytest"
              run: |
                  pytest --cov=. --cov-report=xml --cov-fail-under=80
            
            - name: "Upload coverage report"
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  fail_ci_if_error: true
            
    build:
        name: "Build and Test Docker Image"
        needs: test
        runs-on: ubuntu-latest
        permissions:
            packages: write
        steps:
            - uses: actions/checkout@v4
            - name: "Set up Docker Buildx"
              uses: docker/setup-buildx-action@v3
              
            - name: "Docker metadata"
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: fastapi-app
                  tags: |
                      type=ref,event=branch
                      type=sha
                      type=semver,pattern={{version}}
            
            - name: "Build Docker image"
              uses: docker/build-push-action@v5
              with:
                  context: .
                  load: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
            
            - name: "Scan Docker image for vulnerabilities"
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: "fastapi-app:${{ github.sha }}"
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: "CRITICAL,HIGH"
                  exit-code: "0"
            
            - name: "Test container"
              run: |
                  docker run -d -p 8000:8000 --name test-container fastapi-app:${{ github.sha }}
                  sleep 10
                  
                  # Test health endpoint
                  HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
                  if [ "$HEALTH_STATUS" != "200" ]; then
                      echo "❌ Health check failed with status: $HEALTH_STATUS"
                      docker logs test-container
                      docker stop test-container
                      exit 1
                  fi
                  
                  # Run smoke tests against running container
                  echo "✅ Container health check passed"
                  docker stop test-container


